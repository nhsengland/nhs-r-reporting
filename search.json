[
  {
    "objectID": "posts/r-studio-git.html",
    "href": "posts/r-studio-git.html",
    "title": "Git in R-Studio Tutorial",
    "section": "",
    "text": "Link to the Git in R-Studio tutorial\nAttention all R-Studio users! We are excited to announce a new tutorial created by Pablo Leon-Rodenas. This guide will take you through the process of creating new R-Studio projects with version control features using Git and GitHub, and linking R-Studio with a GitHub repository.\nBy following this tutorial, you will be able to work entirely from R-Studio, applying version control to your scripts, creating new projects on GitHub, and doing all standard version control actions such as commits, pushes, and merges directly from R-Studio. This will make it easy for you to keep track of changes made to your projects and collaborate with others.\nPablo Leon-Rodenas is a Data analyst working in the NHS England and has created this tutorial to help R-Studio users take advantage of the powerful features offered by Git and GitHub. If you have any questions or need further assistance, you can reach out to Pablo at &lt;pablo.leonrodenas@nhs.net&gt;.\nDon’t miss out on this valuable resource, check out the tutorial today and start taking control of your R-Studio projects today!"
  },
  {
    "objectID": "statement-on-tools.html",
    "href": "statement-on-tools.html",
    "title": "NHSE-R Statement on Tools",
    "section": "",
    "text": "A key aim of the NHS England R group is to support the use of R and R-Markdown analytics across the NHS England analyst community. To support this aim, we are developing guides, examples, and code– everything an analyst needs to get started using R.\nThis document describes the why of using R/R-Markdown, as a reference for managers and end-users of these products.\nPlease file issues, make pull requests, and get involved, we’re happy to take contributions to this document."
  },
  {
    "objectID": "statement-on-tools.html#reporting-tools",
    "href": "statement-on-tools.html#reporting-tools",
    "title": "NHSE-R Statement on Tools",
    "section": "Reporting Tools",
    "text": "Reporting Tools\nThe NHSE-R group endorses the use of the following tools:\n\nR\nR-Markdown\nQuarto\nHTML format reports (over PowerPoint)\nPlotly interactive charts\n\nThese tools are now available on NHSE UDAL virtual machines and modern desktop laptops for all analysts."
  },
  {
    "objectID": "tutorials/nhs-colours.html",
    "href": "tutorials/nhs-colours.html",
    "title": "NHS Colour Guidlines",
    "section": "",
    "text": "The colours in the NHS colour palette all offer at least an AA accessibility rating, with many offering the maximum AAA rating when used with sufficient contrasts on appropriate backgrounds.\n&gt; Read the Official NHS Guidance"
  },
  {
    "objectID": "tutorials/nhs-colours.html#nhs-region-colours",
    "href": "tutorials/nhs-colours.html#nhs-region-colours",
    "title": "NHS Colour Guidlines",
    "section": "NHS Region Colours",
    "text": "NHS Region Colours\n\n\n\n\nODS Code\nNHS Code\nRegion\nHex\n\n\n\n\nE40000003\nY56\nLondon\n#78BE20\n\n\nE40000006\nY58\nSouth West\n#FAE100\n\n\nE40000005\nY59\nSouth East\n#ED8B00\n\n\nE40000011\nY60\nMidlands\n#AE2573\n\n\nE40000007\nY61\nEast of England\n#330072\n\n\nE40000010\nY62\nNorth West\n#41B6E6\n\n\nE40000012\nY63\nNorth East & Yorkshire\n#005EB8\n\n\n\n\nThere are seven NHSE regions who support local systems to provide more joined up and sustainable care for patients.\n\n\n\n\n\n\nNote\n\n\n\nUse these in boundary maps, or sparingly in charts wherever it would be useful for identifying the separate regions."
  },
  {
    "objectID": "tutorials/quarto.html",
    "href": "tutorials/quarto.html",
    "title": "Quarto R/Markdown Tutorial",
    "section": "",
    "text": "Note\n\n\n\nDownload and follow along this tutorial in R-Studio."
  },
  {
    "objectID": "tutorials/quarto.html#quarto",
    "href": "tutorials/quarto.html#quarto",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\nThis means you can connect to your data source, conduct detailed analysis and data wrangling, produce charts and tables and present them in an output all in one go.\nOutputs can be to word, PowerPoint, PDF or for the cool kids, an interactive HTML document and that is what we are going to explore here. This output creates a stand alone report with interactive elements that can be shared and emailed like any document. It can be read on any modern HTML browser and will resize and adapt to the host and so will work on tablets and phones.\nIt uses a combination of ‘code chunks’, some will be your basic R and some will be quarto commands and text that are then combined. The beauty of this is that you can combine the two elements which we will explore as this document goes on."
  },
  {
    "objectID": "tutorials/quarto.html#running-code",
    "href": "tutorials/quarto.html#running-code",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n#| echo: false\n2 * 2\nThe echo: false option disables the printing of code so that only output is displayed, for example:\n\n\n[1] 4\n\n\nOr you can add in chunks with code folding such as\n#| code-folding: true \n#| code-summary: \"Show the code\"\n2 * 2\nIn this way we can set up reports that show the code and outputs or just the outputs."
  },
  {
    "objectID": "tutorials/quarto.html#yaml",
    "href": "tutorials/quarto.html#yaml",
    "title": "Quarto R/Markdown Tutorial",
    "section": "YAML",
    "text": "YAML\nAny quarto document starts with a ‘YAML’ chunk. Originally YAML was said to mean Yet Another Markup Language but has been re purposed as a recursive acronym to YAML Ain’t Markup Language. This is all geek speak but in essence the YAML is where you tell quarto the set up of your document. In it you can set the options for output, basic formatting styles and also add things like automatic tables of contents, as you can see in this document.\nMost of these global options can then be tweaked within individual code blocks and so most things are customisable. You can set several output types within the YAML which will allow you to output to several formats at once, eg word and PDF if you so wish.\nIn this report we have the YAML\ntitle: \"R Training\" \\&lt;- the title of the report\\\nformat: \\&lt;- specify the output report\\\n  html: \\&lt;- state we want html\\\n    toc: true \\&lt;- say that we want quarto to build us a table of contents\\\n    toc_float: true \\&lt;- say that we want the table of contents to float so that we can access it anywhere in the document"
  },
  {
    "objectID": "tutorials/quarto.html#headings-and-sub-headings",
    "href": "tutorials/quarto.html#headings-and-sub-headings",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Headings and sub headings",
    "text": "Headings and sub headings\nHeadings and sub headings are very useful to create your report and to navigate around it. Headings are designated by use of the ‘#’ symbol. Hierarchies of subheads can be set up by using multiple ‘#’ has symbols.\nThe single ‘#’ is usually reserved for the top title of the report.\nFurther headings are then designated with ‘##’ and sub headings are then ‘###’ and then if you want a sub sub heading ‘####’ etc. Quarto automatically keeps track of the hierarchy and will build your table of contents automatically based on your design.\nNote as you scroll through the report to the sub headings, the table of contents automatically adjusts and expands and you can click on the table of contents to take you to an appropriate place. Headings don’t have to be numbered and can be set as an offset if needed. You can also set a depth for the table of contents if you wish."
  },
  {
    "objectID": "tutorials/quarto.html#example-heading",
    "href": "tutorials/quarto.html#example-heading",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Example heading",
    "text": "Example heading\nThis is a heading\n\nSub heading one\nThis is the first sub heading\n\n\nSub heading two\nThis is a second subheading\n\nSub heading under sub heading two\nThis is a sub heading under sub heading two\n\n\nSecond sub heading under sub heading two\nThis is another heading under sub heading two\n\nSub heading under the sub heading of sub heading two\nThis is getting like inception now\n\n\n\n\nSub heading three\nWe are back to normal subheadings as you can see that quarto takes care of numbering and will dynamically update as you create your document."
  },
  {
    "objectID": "tutorials/quarto.html#yaml-options",
    "href": "tutorials/quarto.html#yaml-options",
    "title": "Quarto R/Markdown Tutorial",
    "section": "YAML options",
    "text": "YAML options\nA list of further YAML options can be found at https://quarto.org/docs/reference/formats/html.html\n(As you can see - links are automatically designated, or you can set up hyperlinks such as this is a hyperlink"
  },
  {
    "objectID": "tutorials/quarto.html#formatting-text",
    "href": "tutorials/quarto.html#formatting-text",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Formatting text",
    "text": "Formatting text\nYou can do all the normal *italics* and **bold** and ^superscript^ and ~~strike-though~~\n&gt; You can add block quotes\nAll of this can be achieved in code or on the visual editor there are options to do this in a more ‘word’ type way and quarto will convert it for you.\nIf you click on the visual tab in R-Studio and there are all the usual formatting options.\n\nLists\nBullet point lists can be set up easily\n* lists\n* putting stuff in lists\n  + putting stuff in sub lists\n  + such as this\n* did I say lists?\nYou can also do numbered lists\n(@) Like this\n(@) Fine example of a list\n    + and do sub lists in a numbered list\n      i) and do sub sub lists  \n        A. and sub sub sub list\nWrite some stuff in the middle of your list\n(@) and then go back to the list\n(@) NOTE: the numbers in the list are not specified, they are dynamic and if you go and edit one out it will adjust them automatically\n\n\nHTML tag formatting\nQuarto also supports HTML tag formatting\n&lt;p style=\"font-family: comic sans MS; font-size:20pt\"&gt;\n    text\n&lt;/p&gt;\n\nYou can also play with HTML tags to change font to comic sans\n\n&lt;p style=\"font-family: Impact, Charcoal, sans-serif; font-size:10pt; font-style:italic\"&gt;\n    text\n&lt;/p&gt;\n\nJust because you can does not mean you should!\n\nAnd add coloured blocks\n&lt;style&gt;\ndiv.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;}\n&lt;/style&gt;\n&lt;div class = \"blue\"&gt;\n&lt;/div&gt;\n\n\nYou can colour in a block to assist with highlighting an area.\n\nThis is my first conclusion\nThis is my second conclusion\n\n\n\n\nOther built in Quarto callout blocks\nQuarto also allows you to use some nice call out blocks\n::: {.callout-note}\nNote that there are five types of call outs, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of call outs, including: note, warning, important, tip, and caution.\n\n\n\n\n\n\n\n\nTip With Caption\n\n\n\nThis is an example of a call out with a caption.\n\n\n\n\n\n\n\n\nWarning With Caption\n\n\n\nWarning - these call outs look seriously cool.\n\n\n\n\n\n\n\n\nClick To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution call out that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible call out that is expanded by default.\nIf you want you can turn the icon off with “.call out-caution collapse=”true” icon=‘false’” to simply have a collapsible box."
  },
  {
    "objectID": "tutorials/quarto.html#image-insertion",
    "href": "tutorials/quarto.html#image-insertion",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Image insertion",
    "text": "Image insertion\nYou can insert an image or logo!\n![](https://nhsrcommunity.com/wp-content/themes/vl-theme-nhsrv2/assets/images/placeholder_square.jpg)\n\nOr animated gifs\n\nThese may not work in certain environments.\nI take no responsibility for you inserting animated cats into your reports"
  },
  {
    "objectID": "tutorials/quarto.html#spans",
    "href": "tutorials/quarto.html#spans",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Spans",
    "text": "Spans\nAs you can probably see in some of the code above, I have used ‘:::’ to create some formatting. This allows us to adjust the formatting between those spans. Above I have used call outs but you can also use this to set the page to be wider than the default.\nFor instance\n:::{.column-page}\n:::\n\nThis allows you to put in a wider column of text or a wider chart or table than you probably otherwise would. I am going to ramble on a bit here so you can see just how amazing wide this little section can be. Blimey it is pretty wide isn’t it?\n\nYou can then revert back to normal and then if you want…\n:::{.column-screen}\n:::\n\nYou can go really super wide and take up the whole of the screen, this is super useful if you have a really big table or plot or map or something and you really want to use every inch of the screen. Woo! Look at how wide this this! It literally goes from all the way over there to all the way other there. I know right?\n\nWe will come back to formatting later and will show how to put charts and tables and stuff into columns. But now we are going to load in some data and make some plots and start looking at actually adding some data stuff and widgets."
  },
  {
    "objectID": "tutorials/quarto.html#load-in-some-data",
    "href": "tutorials/quarto.html#load-in-some-data",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Load in some data",
    "text": "Load in some data\nWe are now going to load in the NHS-R data sets so we have some stuff to play with and the tidyverse so we can do some wrangling and plots.\nDetails on the NHS-R dataset can be found here https://github.com/nhs-r-community/NHSRdatasets\nDetails on the Tidyverse can be found here https://www.tidyverse.org/\nWe now want to switch from quarto markdown language and go more into traditional R. I am going to keep code echo on so that code appears in this document so you can see what is going on.\nUse the three back ticks and then r in curly brackets to designate that we are now writing R code. We wouldn’t normally show this, but will for this training.\n\n# check if relevant libraries are installed\n# install them if not\n# then call the library\n\n# **NOTE** hash tags have turned back into commenting within the R chunk\n\nif(!require(NHSRdatasets)){\n    install.packages(\"NHSRdatasets\",dependencies =TRUE )\n    library(NHSRdatasets)}\n\nLoading required package: NHSRdatasets\n\nif(!require(tidyverse)){\n    install.packages(\"tidyverse\", dependencies =TRUE)\n    library(tidyverse)}\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n## pull some data from the NHS R data set\ndata &lt;- ae_attendances"
  },
  {
    "objectID": "tutorials/quarto.html#basic-plots-and-tables",
    "href": "tutorials/quarto.html#basic-plots-and-tables",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Basic plots and tables",
    "text": "Basic plots and tables\nWe can create a plot in R as we normally would and it will render inline in the report. For example.\n\n# a simple plot\nplot &lt;- ggplot(\n  filter(data, org_code == \"RXQ\"),\n  aes(\n    x = period,\n    y = attendances,\n    group = type,\n    colour = type\n  )\n) +\n  geom_line(linewidth = 1) +\n  labs(title = \"RXQ Number of attendances by type\") +\n  theme_minimal()\n\nplot\n\n\n\n\nOr we can show a basic tibble output for a table\n\ndata |&gt; filter(org_code == \"RF4\", \n                type == \"other\", \n                attendances &gt;= 5000)\n\n# A tibble: 9 × 6\n  period     org_code type  attendances breaches admissions\n  &lt;date&gt;     &lt;fct&gt;    &lt;fct&gt;       &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n1 2019-03-01 RF4      other       10289       90          0\n2 2019-02-01 RF4      other        9643       87          0\n3 2019-01-01 RF4      other       10424       77          0\n4 2018-12-01 RF4      other        9460       95          0\n5 2018-11-01 RF4      other        8264       30          0\n6 2018-10-01 RF4      other        7900       14          0\n7 2018-09-01 RF4      other        7604       39          0\n8 2018-08-01 RF4      other        7184       73          0\n9 2018-07-01 RF4      other        5072       10          0"
  },
  {
    "objectID": "tutorials/quarto.html#side-by-side-plots",
    "href": "tutorials/quarto.html#side-by-side-plots",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Side by side plots",
    "text": "Side by side plots\nWe can set up plots and text side by side with more advanced spans\n:::: {.columns}\n::: {.column width=\"60%\"}\ncol 1\n:::\n::: {.column width=\"40%\"}\ncol 2\n:::\n\n\n\n\n\n\n\n\n\n\n\nThis is some text along side the chart that is over to the left. You can specify any number of columns and assign them a percentage of the screen width. Quarto will then resize objects to fit. I also put a bit of blank space between them. You could also use this section to add another plot to have them side by side.\n\n\nThis is all achieved with the colon formatting.\nWe could also put two SPC charts next to one another with text underneath each one so we have a rows and column format.\n\nif(!require(NHSRplotthedots)){\n    install.packages(\"NHSRplotthedots\",dependencies =TRUE )\n    library(NHSRplotthedots)}\n\nLoading required package: NHSRplotthedots\n\n# filter data to type 1 for a single site\ndata_spc &lt;- data|&gt; \n  filter(org_code == \"RF4\",\n         type == 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nText for first chart where see can attendances going into special cause blah blah blah.\n\nText for second chart where see can breaches where we can see breaches going all wibbly wobbly. Pretty sure that is a SPC term - reminder to check)\n\n\nThis uses the amazing NHS-R community plot the dots package that replicates NHS SPC rules https://github.com/nhs-r-community/NHSRplotthedots. It allows you create SPC charts with ease and creates a GG plot object that you can then format or tweak to your desire."
  },
  {
    "objectID": "tutorials/quarto.html#inline-code",
    "href": "tutorials/quarto.html#inline-code",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Inline code",
    "text": "Inline code\nIt is also possible to bring R code into your text. This is really nice if you want to automate some commentary.\nThis means that you can dynamically add numbers or words and phrases to your report.\nAll you need to do is use back tick r and then a another back ick to finish your r.\nSo if I put in 22 April 2023, this would return todays date. Look at the code to see it in action.\nJust to show that today’s date is 22 April 2023, this will be the date the report it run. Once reports are run they are stand alone and so dates like this are not automatically updated.\n\nif(!require(english)){\n    install.packages(\"english\",\n                     dependencies =TRUE )\n    library(english)}\n\nLoading required package: english\n\n# create a message depending on when this report is run.\nmessage &lt;-\n  case_when (\n    weekdays(Sys.Date()) == \"Monday\" ~ \"its the start of the week, oh well keep going\",\n    weekdays(Sys.Date()) == \"Tuesday\" ~ \"its Tuesday which isn't Monday, oh well keep going\",\n    weekdays(Sys.Date()) == \"Wednesday\" ~ \"its hump day, the middle of week, oh well keep going\",\n    weekdays(Sys.Date()) == \"Thursday\" ~ \"its Friday eve, oh well keep going\",\n    weekdays(Sys.Date()) == \"Friday\" ~ \"its Friday, just gotta get through this til the weekend\",\n    TRUE ~ \"its the weekend dude\"\n  )\n\nThis means you can adjust your report to the data, for instance you are running this report on a Saturday which means its the weekend dude.\nYou can also pull data from data frames such as the highest amount of attendances using 32,209, in our dataset that was 32,209. The format function is really nice at making human readable numbers or you can get R to convert numbers to text using thirty-two thousand two hundred nine to say the highest was thirty-two thousand two hundred nine attendances. There are also options to add appropriate indefinite articles before numeric words and convert numbers into ordinals such as ‘first’, ‘third’ etc.\nDetails on the English library can be found here https://cran.r-project.org/web/packages/english/english.pdf"
  },
  {
    "objectID": "tutorials/quarto.html#tabsets",
    "href": "tutorials/quarto.html#tabsets",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Tabsets",
    "text": "Tabsets\nAnother really cool thing you can go with Quarto spans is make tab sets. This allows you to enable the user to click between different charts or a chart and a table.\nJust going to make another plot quickly, the same as before but for a different provider.\n\nplot_RF4 &lt;- ggplot(\n  filter(data, org_code == \"RF4\"),\n  aes(\n    x = period,\n    y = attendances,\n    group = type,\n    colour = type\n  )\n) +\n  geom_line(linewidth = 1) +\n  labs(title = \"RF4 Number of attendances by type\") +\n  theme_minimal()\n\nWe can now render these in separate tabs using,\n::: {.panel-tabset}\n## tab 1\n\n## tab 2\nFor example,\n\nProvider RQXProvider RF4\n\n\nTab content showing plot for RQX\n\n\n\n\n\n\n\nTab content showing different content for provider RF4\n\n\n\n\n\n\n\n\nTab sets are a great way to make quite static reports that little more interactive. People love to click buttons and gets then interested in the report and who knows, maybe the data?\nThere are a few options you can add to tabsets including .tabset-pills .tabset-fade to change tabs into buttons and a a smooth fade transition."
  },
  {
    "objectID": "tutorials/quarto.html#tables",
    "href": "tutorials/quarto.html#tables",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Tables",
    "text": "Tables\nI have shown a very basic tibble output but it is pretty ugly. There are a number of table packages and they have all manner of strengths and weaknesses, depending on what you are trying to do. I will give a few examples and try to highlight what they are good for.\n\nKable\nKable is a nice package that makes pretty simple static tables. It works across all formats but does not have advanced interactive features and does not allow you to add icons or graphs into your tables.\nLets make some data for a table.\n\ndata_for_table &lt;- data |&gt; \n  filter(org_code==\"RF4\", \n         type == \"other\", \n         attendances &gt;= 5000)\n\nWe can then make this into a pretty table.\n\nif(!require(kableExtra)){\n    install.packages(\"kableExtra\", \n                     dependencies =TRUE)\n    library(kableExtra)}\n\nLoading required package: kableExtra\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nkable(data_for_table)\n\n\n\n\nperiod\norg_code\ntype\nattendances\nbreaches\nadmissions\n\n\n\n\n2019-03-01\nRF4\nother\n10289\n90\n0\n\n\n2019-02-01\nRF4\nother\n9643\n87\n0\n\n\n2019-01-01\nRF4\nother\n10424\n77\n0\n\n\n2018-12-01\nRF4\nother\n9460\n95\n0\n\n\n2018-11-01\nRF4\nother\n8264\n30\n0\n\n\n2018-10-01\nRF4\nother\n7900\n14\n0\n\n\n2018-09-01\nRF4\nother\n7604\n39\n0\n\n\n2018-08-01\nRF4\nother\n7184\n73\n0\n\n\n2018-07-01\nRF4\nother\n5072\n10\n0\n\n\n\n\n\n\n\nAnd we can add a few more lines to make this a little more pretty and responsive.\nYou could even parse variables or conditionals into the formatting to replicate conditional formatting.\n\nkable(data_for_table) |&gt;\n   kable_styling(\"striped\") |&gt;\n  pack_rows(\"sub heading and indent first 3 rows\", \n            1, \n            3) |&gt;\n  row_spec(4, \n           bold = T, \n           background = \"yellow\") |&gt;\n  row_spec(7, \n           bold = T, \n           color = \"white\", \n           background = \"#D7261E\")\n\n\n\n\nperiod\norg_code\ntype\nattendances\nbreaches\nadmissions\n\n\n\n\nsub heading and indent first 3 rows\n\n\n2019-03-01\nRF4\nother\n10289\n90\n0\n\n\n2019-02-01\nRF4\nother\n9643\n87\n0\n\n\n2019-01-01\nRF4\nother\n10424\n77\n0\n\n\n2018-12-01\nRF4\nother\n9460\n95\n0\n\n\n2018-11-01\nRF4\nother\n8264\n30\n0\n\n\n2018-10-01\nRF4\nother\n7900\n14\n0\n\n\n2018-09-01\nRF4\nother\n7604\n39\n0\n\n\n2018-08-01\nRF4\nother\n7184\n73\n0\n\n\n2018-07-01\nRF4\nother\n5072\n10\n0\n\n\n\n\n\n\n\nFurther details on kable can be found here https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html\n\n\nGT\nGT uses similar syntax to GGplot to build tables in a similar fashion. It can output to most formats but not directly to PowerPoint. You can save the table as an image and insert that as a workaround.\nGT does have the power to insert icons and mini graphs into the table.\n\nif(!require(gt)){\n    install.packages(\"gt\", \n                     dependencies =TRUE)\n    library(gt)}\n\nLoading required package: gt\n\nif(!require(gtExtras)){\n    install.packages(\"gtExtras\", \n                     dependencies =TRUE)\n    library(gtExtras)}\n\nLoading required package: gtExtras\n\ngt(data_for_table) |&gt;\n  gt_plt_bar(column = attendances, \n             keep_column = TRUE, \n             width = 35)\n\n\n\n\n\n\n\n\nperiod\norg_code\ntype\nattendances\nbreaches\nadmissions\nattendances\n\n\n\n\n2019-03-01\nRF4\nother\n10289\n90\n0\n\n\n\n2019-02-01\nRF4\nother\n9643\n87\n0\n\n\n\n2019-01-01\nRF4\nother\n10424\n77\n0\n\n\n\n2018-12-01\nRF4\nother\n9460\n95\n0\n\n\n\n2018-11-01\nRF4\nother\n8264\n30\n0\n\n\n\n2018-10-01\nRF4\nother\n7900\n14\n0\n\n\n\n2018-09-01\nRF4\nother\n7604\n39\n0\n\n\n\n2018-08-01\nRF4\nother\n7184\n73\n0\n\n\n\n2018-07-01\nRF4\nother\n5072\n10\n0\n\n\n\n\n\n\n\n\nThere are all manner of mini charts you can add and also you add add other icons such as plot the dots SPC icons or whatever you want, check out fontawesome for icons.\nThere are also options to add row and column totals or averages.\n\n\nDT (short for data table)\nNow we are getting into the realms of interactive tables. This is more where you have a data table that you wish to allow the user to search, filter and sort.\nThis type of table only works in HTML outputs.\nWill create another subset of data to put into the table.\n\nif(!require(DT)){\n    install.packages(\"DT\", \n                     dependencies =TRUE)\n    library(DT)}\n\nLoading required package: DT\n\n# pick a random sample of 150 rows from the data\ndata_for_dt &lt;- data[sample(nrow(data), \n                           size=150), ]\n\ndatatable(data_for_dt, \n          filter = 'top', \n          extensions = 'Buttons',\n          options = list(dom = 'Blfrtip',\n          buttons = c('copy', \n                      'csv', \n                      'pdf', \n                      'print'),\n          lengthMenu = list(c(10,25,50,-1),\n          c(10,25,50,\"All\"))))\n\n\n\n\n\n\nThis lovely table gives us some nice widgets and features to play with. You can click on a column heading to sort by that column, click it again to reverse the sort. You can click in the filter boxes and select filters. You can opt to expand the data. You can type in the search box to find or filter the data and then finally you can export the data or print it. This will export or print based on your sorts and filters.\nFurther info on the DT library can be found here https://rstudio.github.io/DT/\n\n\nReactable\nNow if you want to group your data and show hierarchy and calculations, flextable is great.\nAgain this is HTML only.\n\nif(!require(reactable)){\n    install.packages(\"reactable\", \n                     dependencies =TRUE)\n    library(reactable)}\n\nLoading required package: reactable\n\ndata_for_reactable &lt;- data |&gt;\n  filter (period &gt; '2018-10-01')\n\nreactable(\n  data_for_reactable,\n  groupBy = c(\"period\", \n              \"type\"),\n  minRows = 10,\n  columns = list (\n    attendances = colDef(\n      aggregate = \"median\",\n      name = \"Median attendances\",\n      align = \"left\"\n    ),\n    breaches = colDef(\n      aggregate =  \"max\",\n      name = \"Max breaches\",\n      align = \"left\"\n    )  ,\n    admissions = colDef(\n      aggregate = \"mean\",\n      format = colFormat(digits = 1),\n      name = \"Mean admissions\",\n      align = \"left\"\n    )\n  )\n)\n\n\n\n\n\n\nWith this table you can drill down into the data. The aggregation has been completed by the table and no calculations have been carried out externally to the table. This is a nice way to create a hierarchy of systems/icbs/providers/directorates/teams/workers.\nFurther details for reactable can be found here https://glin.github.io/reactable/\n\n\nOther table types are available\nA few well known other table libraries are Flextable Huxtable or tableone if you want a more research based table one.\nFlextable is very similar to GT in outputs. It does feature some additional output types. However I find the syntax of GT easier to work with."
  },
  {
    "objectID": "tutorials/quarto.html#plotting",
    "href": "tutorials/quarto.html#plotting",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Plotting",
    "text": "Plotting\n\nConverting GGplot to interactive\nPlotly is a fantastic alternative plotting library. It is fantastic for creating interactive plots really simply. These work in HTML outputs. The simplest way to use plotly is to build a plot in ggplot and then convert it to a plotly plot. So lets do that. We can take the ‘plot’ object we have previously created and convert it.\nPlotly has all manner of options and futher details can be found https://plotly.com/r/\n\nif(!require(plotly)){\n    install.packages(\"plotly\", \n                     dependencies =TRUE)\n    library(plotly)}\n\nLoading required package: plotly\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\np &lt;- ggplotly(plot,\n              source = 'h',)\n\np\n\n\n\n\n\nAt first glance this gives us a very similar plot. However we now have hover over on the plot traces. You can click on the legend and turn lines on and off. You can click and rag an area and zoom into that section. You can also save a picture of your filtered plot. Have a play with the icons above the plot and see what you can do.\n\n\nCreating a plotly plot directly\nWe will filter down type one attendances and compare number of attendances.\n\ndata_for_boxplot &lt;- data |&gt;\n  filter (type == 1)\n\nplot_ly(data_for_boxplot,\n        x = ~org_code,\n        y = ~attendances,\n        source = 'f',\n        type = \"box\")\n\n\n\n\n\nThis is a nice example of where zoom becomes useful. You can also see how plotly has added some additional information that we have not calculated to show quartile values and you can hover over outliers to identify them.\n\n\nAnimating graphs\nThis is an area that comes under the just because you can, doesn’t mean you should. Animated graphs can be used to show an additional dimension over time.\nLets have a look at our original graph and animate it. This does require a little more wrangling to generate a accumulated data frame.\n\nif(!require(lazyeval)){\n    install.packages(\"lazyeval\", \n                     dependencies =TRUE)\n    library(lazyeval)}\n\nLoading required package: lazyeval\n\n\n\nAttaching package: 'lazyeval'\n\n\nThe following objects are masked from 'package:purrr':\n\n    is_atomic, is_formula\n\nif(!require(lubridate)){\n    install.packages(\"lubridate\", \n                     dependencies =TRUE)\n    library(lubridate)}\n\nLoading required package: lubridate\n\n\nLoading required package: timechange\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n# little function that creates a accumulated data frame\naccumulate_by &lt;- function(dat, \n                          var) {\n  var &lt;- lazyeval::f_eval(var, \n                          dat)\n  lvls &lt;- plotly:::getLevels(var)\n  dats &lt;- lapply(seq_along(lvls), \n                 function(x) {\n    cbind(dat[var %in% lvls[seq(1, x)], ], \n          frame = lvls[[x]])\n  })\n  dplyr::bind_rows(dats)\n}\n\n# filters data and orders it\ndata_ani &lt;-data |&gt; \n  filter(org_code == \"RXQ\") |&gt;\n  arrange(period) |&gt;\n  accumulate_by (~period) |&gt;\n  mutate (year = year(period),\n          date = decimal_date(period))\n\n# create animate plot - I have added a number of features\n# so you can see how to build up this a plot\nani_plot &lt;- data_ani |&gt;\n  plot_ly(\n    x = ~ date,\n    y = ~ attendances,\n    split = ~ type,\n    frame = ~ frame,\n        source = 'e',\n    type = 'scatter',\n    mode = 'lines'\n  ) |&gt; layout(\n    xaxis = list(title = \"Date\",\n                 zeroline = F),\n    yaxis = list(title = \"Admissions\",\n                 zeroline = T)\n  ) |&gt; animation_opts(frame = 100,\n                       transition = 0,\n                       redraw = TRUE) |&gt; \n  animation_slider(hide = F) |&gt; \n  animation_button(x = 1,\n                   xanchor = \"right\",\n                   y = 0,\n                   yanchor = \"bottom\")\n\nani_plot\n\n\n\n\n\nThis uses lazyeval https://github.com/hadley/lazyeval and lubridate https://lubridate.tidyverse.org/\n\n\n3D plots\nAnother one to be in the realms of just because you can doesn’t mean you should is the 3D plot.\nHere we can see a 3d scatter plot of Attendances, Discharges and Breaches. This uses plotly.\n\ndata_three_d &lt;- data |&gt;\n  filter (org_code == 'RF4',\n          type == 1)\n  \nplot_ly(data_three_d,\n        x = ~breaches,\n        y = ~attendances,\n        z = ~admissions,\n        type = 'scatter3d',\n        source = 'd',\n        mode = 'markers')\n\n\n\n\n\nWell that certainly is a thing. You can click and drag to rotate and also use mouse wheel to zoom in and out.\nNOTE Whilst we are here, have you noticed that the table of contents to the lesft has now expanded to show all the subheadings in this plot section?\n\n\nDygraphs for time series\nAnother great plotting library that is more specifically designed for interactive time series is DY graphs. This has some great features that we will explore below. It does require a bit more of unusual data type but it is simple to convert.\n\nif(!require(dygraphs)){\n    install.packages(\"dygraphs\", \n                     dependencies =TRUE)\n    library(dygraphs)}\n\nLoading required package: dygraphs\n\nif(!require(xts)){\n    install.packages(\"xts\", \n                     dependencies =TRUE)\n    library(xts)}\n\nLoading required package: xts\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n\nAttaching package: 'xts'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n\ndata_for_dy &lt;- data|&gt;\n  filter (org_code == 'RF4',\n          type == 1) |&gt;\n  select(period, \n         attendances)\n\n# create a 'xts' time series object\ndy_xts &lt;- xts(x = data_for_dy$attendances, \n              order.by = data_for_dy$period)\n\ndygraph(dy_xts, \n        main = \"Admissions over time\") |&gt;\n  dyOptions(labelsUTC = TRUE, \n            fillGraph=TRUE, \n            fillAlpha=0.1, \n            drawGrid = FALSE, \n            colors=\"#D8AE5A\",) |&gt;\n  dyRangeSelector() |&gt;\n  dyCrosshair(direction = \"vertical\") |&gt;\n  dyHighlight(highlightCircleSize = 5, \n              highlightSeriesBackgroundAlpha = 0.2, \n              hideOnMouseOut = FALSE) |&gt;\n  dyRoller(rollPeriod = 0) |&gt;\n  dyAxis(\"y\", label = \"Number of admissions\")\n\n\n\n\n\nThis gives us a nice graph with a slider to filter the time series, this allows focus on specific areas. There is also the little box on the bottom left that takes a numeric input, if you add a number in there, then it automatically smooths the time series to a rolling average of a window of what you specify.\nMore info on dygraphs can be found here https://rstudio.github.io/dygraphs/index.html\n\n\nSurvey Plots\nA nice plot to visualise a survey is a likert plot. You can wrap this into a ggplotly if you want hover overs and such like, but, I think this doesn’t really need to be interactive.\n\nif(!require(data.table)){\n    install.packages(\"data.table\", \n                     dependencies =TRUE)\n    library(data.table)}\n\nLoading required package: data.table\n\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:xts':\n\n    first, last\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n\nif(!require(likert)){\n    install.packages(\"likert\", \n                     dependencies =TRUE)\n    library(likert)}\n\nLoading required package: likert\n\n\nLoading required package: xtable\n\n\n\nAttaching package: 'likert'\n\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\n#create some ‘random’ dummy data (deliberately skewed for demo purposes)\nd &lt;- setDT(data.frame(\n  do_you_like_puppies = sample(1:4,50,replace = TRUE),\n  do_you_like_kittens = sample(2:5,50,replace = TRUE),\n  do_you_like_excel = sample(1:3,50,replace = TRUE),\n  do_you_like_pirana = sample(1:5,50,replace = TRUE),\n  do_you_like_guppies = sample(1:3,50,replace = TRUE),\n  do_you_like_quarto = sample(4:5,50,replace = TRUE),\n  do_you_like_grungs = sample(1:5,50,replace = TRUE)\n))\n# convert the data into text and assign function 'levels'\n# ie the order of the factors\ndata_l &lt;- d |&gt;\n  mutate_all(\n    (~factor(case_when(\n      . == 1 ~ \"Strongly disagree\",\n      . == 2 ~ \"Disagree\",\n      . == 3 ~ \"Neutral\",\n      . == 4 ~ \"Agree\",\n      . == 5 ~ \"Strongly agree\"),\n      levels = c(\"Strongly disagree\",\n                 \"Disagree\",\n                 \"Neutral\",\n                 \"Agree\", \n                 \"Strongly agree\")\n    )))\n\n# plot the data into a likert chart\nplot(likert::likert(data_l),\n     low.color = \"#FF6665\",\n     high.color = \"#5AB4AC\",\n     neutral.color.ramp = \"white\",\n     neutral.color = \"grey90\")+\n  ggtitle(\"Attitudes towards stuff\")+\n  theme_classic(base_size = 12)\n\n\n\n\nThis used data.table to pull the data together. It is a completely alternative methodology for using dataframes. It is faster and has many great features. Way too much to go through in this tutorial. More info here https://rdatatable.gitlab.io/data.table/\nIt also uses a likert library, details here https://github.com/jbryer/likert\n\n\nTreemap - a piechart alternative\nWe know pie charts are terrible, but sometimes you need a visual representation of proportions. Treemaps gives a nice alternative and also can do this in an interactive way to show proportions within sub groups.\nThis uses plotly once more.\n\n# data for treemap - compare attendances by two sites and type of attendance\n data_treemap &lt;- data |&gt;\n   filter (org_code %in% c('RF4',\n                           'R1H')) |&gt;\n  group_by(org_code,type) |&gt;\n  summarise(tot_admits = sum(attendances)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'org_code'. You can override using the\n`.groups` argument.\n\n#Since your treemap is \"many\" dimensional, you'll need a unique ID field for each row. I'm not sure what dimension size constitutes this necessity by Plotly standards. The easiest way is to use the child and parent names.\n\n#This column needs to be the first column in the data frame. (I have NO idea why.)\n\ndata_treemap &lt;- data_treemap |&gt; # create id labels for each row\n    mutate(ids = ifelse(org_code == \"\", \n                        type, \n                        paste0(type, \n                               \"-\", \n                               org_code))) |&gt; \n    select(ids, \n           everything())\n\n# You also have to add the parents to items with the total for the parent. In the parent columns, you'll enter empty strings (because the parent doesn't have a parent).\n\npar_info &lt;- data_treemap |&gt; \n  group_by(org_code) |&gt;  # group by parent\n    summarise(tot_admits = sum(tot_admits)) |&gt;  # parent total\n    rename(type = org_code) |&gt;            # parent labels for the item field\n    mutate(org_code = \"\", \n           ids = type) |&gt;  # add missing fields for data_treemap\n    select(names(data_treemap))            # put cols in same order as data_treemap\n\n# Now smash your original data with the content in par_info, \n# and you are hot to plot.\n\ndata_treemap &lt;- rbind(data_treemap, \n                      par_info)\n\nplot_ly(\n  data = data_treemap, \n  branchvalues = \"total\",\n  type = \"treemap\", \n  labels = ~type,\n  parents = ~org_code, \n  values = ~tot_admits, \n  ids = ~ids)\n\n\n\n\n\n\n\nCollapsible Tree - Dendrogram\nA dendogram is a really nice way of showing flow through systems. Our data set here is not really a good example but hopefully you get the point. You can make these horizontal or vertical and play with all manner of bits within the nodes.\n\nif(!require(collapsibleTree)){\n    install.packages(\"collapsibleTree\", \n                     dependencies =TRUE)\n    library(collapsibleTree)}\n\nLoading required package: collapsibleTree\n\ndata_collapse &lt;- data |&gt; \n  filter (org_code %in% c(\"RK9\", \n                          \"RWJ\", \n                          \"AD913\")) |&gt;\n  group_by (org_code, type) |&gt;\n  summarise (tot_attend = sum(attendances),\n             tot_breach = sum(breaches),\n             tot_admit = sum(admissions)) |&gt;\n  pivot_longer(cols = c(tot_attend, \n                        tot_breach, \n                        tot_admit))\n\n`summarise()` has grouped output by 'org_code'. You can override using the\n`.groups` argument.\n\ncollapsibleTree( data_collapse, \n                 c(\"org_code\", \n                   \"type\",\n                   \"name\"), \n                 nodeSize = 'count', \n                 root = 'Base data', \n                 tooltip = TRUE,\n                 attribute = 'value')\n\n\n\n\n\nYou can click on the nodes and expand the network. In this instance you can click on the sites and it then shows a breakdown of types of attendances and then a click another node to expand that. You can drag and click and zoom in and out with mouse wheel.\nFurther details https://github.com/AdeelK93/collapsibleTree\n\n\nHeatmaps\nThe iheatmapr package specializes in creating interactive heat maps, that range from standard heat maps to relatively complex ones, that can be built up in stages. It uses the plotly for interactivity.\nThis is getting pretty advanced now but shows a little of the art of the possible.\nGoing to load in a historic measles data set to show this one off. A good potential if you want to show the impact of an intervention.\nThis library appears to have a conflict with plotly - you currently cant render both within a document in its native form. There is an option to convert it into a pure plotly plot.\n\nif(!require(iheatmapr)){\n    install.packages(\"iheatmapr\")\n    library(iheatmapr)}\n\nLoading required package: iheatmapr\n\ndata(measles, package = \"iheatmapr\")\n\nhm &lt;- main_heatmap(measles, name = \"Measles&lt;br&gt;Cases\", x_categorical = FALSE,\n             layout = list(font = list(size = 8, width = '100%'))) |&gt;\n    add_col_groups(ifelse(1930:2001 &lt; 1961,\"No\",\"Yes\"),\n                  side = \"bottom\", name = \"Vaccine&lt;br&gt;Introduced?\",\n                  title = \"Vaccine?\",\n                  colors = c(\"lightgray\",\"blue\")) |&gt;\n  add_col_labels(ticktext = seq(1930,2000,10),font = list(size = 8)) |&gt;\n  add_row_labels(size = 0.3,font = list(size = 6)) |&gt; \n  add_col_summary(layout = list(title = \"Average&lt;br&gt;across&lt;br&gt;states\"),\n                  yname = \"summary\")  |&gt;                 \n  add_col_title(\"Measles Cases from 1930 to 2001\", side= \"top\") |&gt;\n  add_row_summary(groups = TRUE, \n                  type = \"bar\",\n                  layout = list(title = \"Average&lt;br&gt;per&lt;br&gt;year\",\n                                font = list(size = 8))) \n\n# this library has conflicts with plotly so this\n# converts it into plotly to solve that conflict\nhm &lt;- to_plotly_list(hm)\nplotly_build(hm)\n\n\n\n\n\nAgain this really benefits from plotlys ability to zoom in and out. The iheatmap library gives lots of helper functions to build this type of plot. You could do it with just plotly, but I like things to be easy.\nMore details on iheatmapr at https://docs.ropensci.org/iheatmapr/\n\n\nPlotly with dropdown lists\nYou can also create a data set and create filters within plotly, for example if we take our original plot and get data for two (or more) sites, we can create a drop down box to switch between the two sites.\n\ndata_plot_drop &lt;- data |&gt; \n  filter(org_code %in% c(\"RF4\", \n                         \"R1H\", \n                         \"RJ6\"),\n         type == 1) |&gt;\n  arrange(period)\n\npd &lt;- data_plot_drop |&gt;\n  plot_ly(\n    type='scatter',\n    mode = 'lines', \n    x = ~period, \n    y = ~attendances,\n    source = 'c',\n    transforms = list(\n      list(\n        type = 'filter',\n        target = ~org_code,\n        operation = '=',\n        value = unique(data_plot_drop$org_code)[1]\n      )\n  )) |&gt; layout(\n    updatemenus = list(\n      list(\n        type = 'dropdown',\n        active = 0,\n        buttons = list(\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", \n                           unique(data_plot_drop$org_code)[1]),\n               label = unique(data_plot_drop$org_code)[1]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", \n                           unique(data_plot_drop$org_code)[2]),\n               label = unique(data_plot_drop$org_code)[2]),\n          list(method = \"restyle\",\n               args = list(\"transforms[0].value\", \n                           unique(data_plot_drop$org_code)[3]),\n               label = unique(data_plot_drop$org_code)[3])\n        )\n      )\n    )\n  )\n\npd\n\n\n\n\n\nThis method is a little more difficult to set up and takes a little more wrangling to make it work dynamically based on your data set, but it does provide some excellent functionality.\nYou can also use this method to change the chart type or other attributes within a chart. This may be useful to switch between say a box plot and scatter plot on the same data."
  },
  {
    "objectID": "tutorials/quarto.html#maps",
    "href": "tutorials/quarto.html#maps",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Maps",
    "text": "Maps\nR has a fantastic library called leaflet that allows you to create maps with many layers. These can be pointers, drill downs or choropleth (heat maps). Shape files of LSOAs are available open source. These can then be coloured in based on any factor you choose.\nAnother really useful thing to be able to do is add pointers onto a map. Often your data comes in form of postcode and there is a nice geocoder available that converts UK postcodes into longitudes and latitudes.\nAn example map.\n\nif(!require(leaflet)){\n    install.packages(\"leaflet\", \n                     dependencies =TRUE)\n    library(leaflet)}\n\nLoading required package: leaflet\n\n\n\nAttaching package: 'leaflet'\n\n\nThe following object is masked from 'package:xts':\n\n    addLegend\n\nif(!require(tidygeocoder)){\n    install.packages(\"tidygeocoder\", \n                     dependencies =TRUE)\n    library(tidygeocoder)}\n\nLoading required package: tidygeocoder\n\n## creates a basic data frame with some teams and postcodes\nlabel &lt;- c('Team A', \n           'Team A', \n           'Team B', \n           'Team B', \n           'Team C')\npostcode &lt;- c('EX16 7FL', \n              'EX39 5EN', \n              'PL13 2WP', \n              'PL15 8RZ', \n              'PL30 4PX')\n\ndf &lt;- data.frame(label,\n                 postcode)\n\n## This is the magic bit that uses the tidygeocoder package to find longitudes and latitudes\ndf &lt;- df |&gt; \n  mutate(geo(address = df$postcode, \n             method = 'osm'))\n\nPassing 5 addresses to the Nominatim single address geocoder\n\n\nQuery completed in: 5 seconds\n\n## Filters cohort into three lists, one for each icon set\ncohort_filter1 &lt;- df |&gt;\n  filter(df$label == \"Team A\")\ncohort_filter2 &lt;- df |&gt;\n  filter(df$label == \"Team B\")\ncohort_filter3 &lt;- df |&gt;\n  filter(df$label == \"Team C\")\n\n##  Create awesome icon sets for colours\niconSet &lt;- awesomeIconList(\n  \"Team A\"  = makeAwesomeIcon( icon = 'male', \n                               lib = 'fa', \n                               iconColor = \"black\", \n                               markerColor = \"red\", \n                               spin = FALSE ) ,\n  \"Team B\" = makeAwesomeIcon( icon = 'male', \n                              lib = 'fa', \n                              iconColor = \"black\", \n                              markerColor = \"orange\", \n                              spin = FALSE ) ,\n  \"Team C\" = makeAwesomeIcon( icon = 'male', \n                              lib = 'fa', \n                              iconColor = \"black\", \n                              markerColor = \"beige\" , \n                              spin = TRUE ) )\n\n## Creates layers for map, each for the three icon set 'Teams'\nmap &lt;- leaflet(df) |&gt;  \n  addTiles() |&gt;\n  addProviderTiles(providers$OpenStreetMap) |&gt; \n  addAwesomeMarkers( lng = cohort_filter1$long,\n                     lat = cohort_filter1$lat,\n                     group = \"Team A\",\n                     icon = iconSet[cohort_filter1$label],\n                     label = paste(sep = \" - \",\n                                   cohort_filter1$label ) ) |&gt;\n  addAwesomeMarkers( lng = cohort_filter2$long,\n                     lat = cohort_filter2$lat,\n                     group = \"Team B\",\n                     icon = iconSet[cohort_filter2$label],\n                     label = paste(sep = \" - \",\n                                   cohort_filter2$label ) ) |&gt;\n  addAwesomeMarkers( lng = cohort_filter3$long,\n                     lat = cohort_filter3$lat,\n                     group = \"Team C\",\n                     icon = iconSet[cohort_filter3$label],\n                     label = paste(sep = \" - \",\n                                   cohort_filter3$label ) ) |&gt; \n  addLayersControl(overlayGroups = c(\"Team A\", \n                                     \"Team B\", \n                                     \"Team C\"),    ##this bit adds the controls\n    options = layersControlOptions(collapsed = FALSE) ) \n\nmap\n\n\n\n\n\nThe map above is built in several layers. A control has been added that allows you to switch layers on and off. You can also click and drag and zoom in and out of the map. The markers resize dynamically and keep their relative size.\nMore examples and details on leaflet can be found here https://rstudio.github.io/leaflet/"
  },
  {
    "objectID": "tutorials/quarto.html#wordcloud",
    "href": "tutorials/quarto.html#wordcloud",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Wordcloud",
    "text": "Wordcloud\nWordcloud2 is the sequel to wordcloud, much like Evil Dead 2 to the original, it is a far superior product, it has some really nice easy to use features and can make all manner of different wordclouds types.\nHowever before you get to a word cloud you need some data which is basically a list of words and their frequency. You can do this manually on your fingers or you can get R to do this for you. I definitely recommend the latter.\nTo get to that you read in some data, strip out all the gubbins such as punctuation, remove all the ‘stop words’ such as ‘the’ and ‘and’ etc and then remove white space and there you have a bunch of words fit for a cloud.\nThis is an example that pulls the text from a popular children’s novel and creates a cloud. Hopefully you can guess the book from the cloud.\nYou can hover over the words in the cloud and it will tell you the word and give you the number of the frequency.\n\nif(!require(tm)){\n    install.packages(\"tm\", \n                     dependencies =TRUE)\n    library(tm)}\nif(!require(SnowballC)){\n    install.packages(\"SnowballC\", \n                     dependencies =TRUE)\n    library(SnowballC)}\nif(!require(wordcloud2)){\n    install.packages(\"wordcloud2\", \n                     dependencies =TRUE)\n    library(wordcloud2)}\nif(!require(RColorBrewer)){\n    install.packages(\"RColorBrewer\", \n                     dependencies =TRUE)\n    library(RColorBrewer)}\n\n## reads in text file from the interwebz\n#filePath &lt;- \"https://www.gutenberg.org/files/11/11-0.txt\" - not working in UDAL\ntext &lt;- 'CHAPTER V. Advice from a Caterpillar The Caterpillar and Alice looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. “Who are _you?_” said the Caterpillar. This was not an encouraging opening for a conversation. Alice replied, rather shyly, “I—I hardly know, sir, just at present—at least I know who I _was_ when I got up this morning, but I think I must have been changed several times since then.” “What do you mean by that?” said the Caterpillar sternly. “Explain yourself!” “I can’t explain _myself_, I’m afraid, sir,” said Alice, “because I’m not myself, you see.” “I don’t see,” said the Caterpillar. “I’m afraid I can’t put it more clearly,” Alice replied very politely, “for I can’t understand it myself to begin with; and being so many different sizes in a day is very confusing.” “It isn’t,” said the Caterpillar. “Well, perhaps you haven’t found it so yet,” said Alice; “but when you have to turn into a chrysalis—you will some day, you know—and then after that into a butterfly, I should think you’ll feel it a little queer, won’t you?” “Not a bit,” said the Caterpillar.“Well, perhaps your feelings may be different,” said Alice; “all I know is, it would feel very queer to _me_.” “You!” said the Caterpillar contemptuously. “Who are _you?_” Which brought them back again to the beginning of the conversation. Alice felt a little irritated at the Caterpillar’s making such _very_short remarks, and she drew herself up and said, very gravely, “I think, you ought to tell me who _you_ are, first.” “Why?” said the Caterpillar. Here was another puzzling question; and as Alice could not think of any good reason, and as the Caterpillar seemed to be in a _very_ unpleasant state of mind, she turned away. “Come back!” the Caterpillar called after her. “I’ve something important to say!” This sounded promising, certainly: Alice turned and came back again. “Keep your temper,” said the Caterpillar. “Is that all?” said Alice, swallowing down her anger as well as she could. “No,” said the Caterpillar.Alice thought she might as well wait, as she had nothing else to do,and perhaps after all it might tell her something worth hearing. For some minutes it puffed away without speaking, but at last it unfolded its arms, took the hookah out of its mouth again, and said, “So you think you’re changed, do you?” “I’m afraid I am, sir,” said Alice; “I can’t remember things as I used—and I don’t keep the same size for ten minutes together!” “Can’t remember _what_ things?” said the Caterpillar. “Well, I’ve tried to say “How doth the little busy bee,” but it all came different!” Alice replied in a very melancholy voice. “Repeat, “_You are old, Father William_,’” said the Caterpillar. Alice folded her hands, and began:—“You are old, Father William,” the young man said,“And your hair has become very white; And yet you incessantly stand on your head—Do you think, at your age, it is right?” “In my youth,” Father William replied to his son,“I feared it might injure the brain;But, now that I’m perfectly sure I have none, Why, I do it again and again.” “You are old,” said the youth, “as I mentioned before,And have grown most uncommonly fat;Yet you turned a back-somersault in at the door— Pray, what is the reason of that?” “In my youth,” said the sage, as he shook his grey locks, “I kept all my limbs very supple By the use of this ointment—one shilling the box—Allow me to sell you a couple?” “You are old,” said the youth, “and your jaws are too weak For anything tougher than suet; Yet you finished the goose, with the bones and the beak— Pray, how did you manage to do it?” “In my youth,” said his father, “I took to the law,And argued each case with my wife; And the muscular strength, which it gave to my jaw, Has lasted the rest of my life.” “You are old,” said the youth, “one would hardly suppose That your eye was as steady as ever;Yet you balanced an eel on the end of your nose—What made you so awfully clever?”“I have answered three questions, and that is enough,”    Said his father; “don’t give yourself airs!Do you think I can listen all day to such stuff?Be off, or I’ll kick you down stairs!”“That is not said right,” said the Caterpillar.“Not _quite_ right, I’m afraid,” said Alice, timidly; “some of the words have got altered.”“It is wrong from beginning to end,” said the Caterpillar decidedly,and there was silence for some minutes.The Caterpillar was the first to speak.“What size do you want to be?” it asked.“Oh, I’m not particular as to size,” Alice hastily replied; “only one doesn’t like changing so often, you know.”“I _don’t_ know,” said the Caterpillar.Alice said nothing: she had never been so much contradicted in her lifebefore, and she felt that she was losing her temper.“Are you content now?” said the Caterpillar.“Well, I should like to be a _little_ larger, sir, if you wouldn’t mind,” said Alice: “three inches is such a wretched height to be.” “It is a very good height indeed!” said the Caterpillar angrily,rearing itself upright as it spoke (it was exactly three inches high).“But I’m not used to it!” pleaded poor Alice in a piteous tone. And she thought of herself, “I wish the creatures wouldn’t be so easily offended!” “You’ll get used to it in time,” said the Caterpillar; and it put the hookah into its mouth and began smoking again.This time Alice waited patiently until it chose to speak again. In a minute or two the Caterpillar took the hookah out of its mouth and yawned once or twice, and shook itself. Then it got down off the mushroom, and crawled away in the grass, merely remarking as it went,“One side will make you grow taller, and the other side will make you grow shorter.” “One side of _what?_ The other side of _what?_” thought Alice to herself. “Of the mushroom,” said the Caterpillar, just as if she had asked it aloud; and in another moment it was out of sight. Alice remained looking thoughtfully at the mushroom for a minute, trying to make out which were the two sides of it; and as it was perfectly round, she found this a very difficult question. However, at last she stretched her arms round it as far as they would go, and broke off a bit of the edge with each hand. “And now which is which?” she said to herself, and nibbled a little of the right-hand bit to try the effect: the next moment she felt a violent blow underneath her chin: it had struck her foot! She was a good deal frightened by this very sudden change, but she felt that there was no time to be lost, as she was shrinking rapidly; so she set to work at once to eat some of the other bit. Her chin was pressed so closely against her foot, that there was hardly room to open her mouth; but she did it at last, and managed to swallow a morsel of the lefthand bit.\n'\n\n##converts the file into a corpus (vector file for text mining)\ndocs &lt;- Corpus(VectorSource(text))\n\n## removes spaces as and odd characters\ntoSpace &lt;- content_transformer(function (x , \n                                         pattern ) gsub(pattern, \" \", x))\ndocs &lt;- tm_map(docs, toSpace, \"/\")\ndocs &lt;- tm_map(docs, toSpace, \"@\")\ndocs &lt;- tm_map(docs, toSpace, \"\\\\|\")\ndocs &lt;- tm_map(docs, toSpace, \"'\")\ndocs &lt;- tm_map(docs, toSpace, \"`\")\n# Remove punctuation\ndocs &lt;- tm_map(docs, removePunctuation)\n# Convert the text to lower case\ndocs &lt;- tm_map(docs, content_transformer(tolower))\n# Remove numbers\ndocs &lt;- tm_map(docs, removeNumbers)\n# Remove English common stop words\ndocs &lt;- tm_map(docs, removeWords, stopwords(\"english\"))\n# specify your stop words as a character vector - in this instance it was picking up some of the copyright notice\ndocs &lt;- tm_map(docs, \n               removeWords, c(\"project\", \n                              \"license\",\n                              \"copyright\",\n                              \"gutenberg\",\n                              \"electronic\",\n                              \"agreement\",\n                              \"gutenbergtm\")) \n# Eliminate extra white spaces\ndocs &lt;- tm_map(docs, \n               stripWhitespace)\n#it was still bringing back some quotation marks and so this finally removes what is left\nremoveSpecialChars &lt;- function(x) gsub(\"[^a-zA-Z0-9 ]\",\"\",x)\ndocs &lt;- tm_map(docs, \n               content_transformer(removeSpecialChars))\n\n# this bit sorts and ranks the word frequencies and plonks into the data frame 'd'\ndtm &lt;- TermDocumentMatrix(docs)\nm &lt;- as.matrix(dtm)\nv &lt;- sort(rowSums(m),\n          decreasing=TRUE)\nd &lt;- data.frame(word = names(v),\n                freq=v)\n\n# this is the line that creates the word cloud\nwordcloud2(d, \n           color = \"random-light\", \n           backgroundColor = \"white\")\n\n\n\n\nlibrary(widgetframe)\n\nThe tm library does tend to throw up a lot of warnings when you are removing words from your corpus. Nothing too much to worry about, but just be mindful of exactly what is being removed.\nThe library tm https://www.rdocumentation.org/packages/tm/versions/0.7-10 does much of the heavy lifting in text processing and cleaning and can be used in all manner of text mining functions.\nThe library snowballC https://www.rdocumentation.org/packages/SnowballC/versions/0.7.0 utilises Porter’s word stemming algorithm for collapsing words to a common root. IE converting ‘coding’, ‘coder’, ‘codes’ all into one root of ‘code’.\nThe library rcolorbrewer https://www.rdocumentation.org/packages/RColorBrewer/versions/1.1-3/topics/RColorBrewer is great at making colour palettes, great if you want to make a range of colours and turn them into a palette. For instance if you want a 20 colour gradient between white and black. It has great options for accessibility such as using only colour blind palettes.\nFinally wordcloud2 https://www.rdocumentation.org/packages/wordcloud2/versions/0.2.1/topics/wordcloud2 pops all the words into a cloud, which can be shaped or tweaked to your liking."
  },
  {
    "objectID": "tutorials/quarto.html#mermaid-diagrams",
    "href": "tutorials/quarto.html#mermaid-diagrams",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Mermaid diagrams",
    "text": "Mermaid diagrams\nQuart has native support for mermaid for making flow diagrams. You basically create a chunk of code and call mermaid instead of R.\nThis can be as simple as the example below.\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n\n\n\nor can get more complex such as\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;Simon: Hello Simon, how is the coding going??\n  loop Codecheck\n    Simon-&gt;&gt;Simon: Check stack overflow\n  end\n  Note right of Simon: Stack overflow &lt;br/&gt;answer found!\n  Simon--&gt;&gt;Alice: Great!\n  Simon-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;Simon: Jolly good!\n\n\n\n\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;Simon: Hello Simon, how is the coding going??\n  loop Codecheck\n    Simon-&gt;&gt;Simon: Check stack overflow\n  end\n  Note right of Simon: Stack overflow &lt;br/&gt;answer found!\n  Simon--&gt;&gt;Alice: Great!\n  Simon-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;Simon: Jolly good!\n\n\n\n\n\nTo learn more about using Mermaid, see the Mermaid website[https://mermaid.js.org/]."
  },
  {
    "objectID": "tutorials/quarto.html#graphviz-networks",
    "href": "tutorials/quarto.html#graphviz-networks",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Graphviz Networks",
    "text": "Graphviz Networks\nAnother language supported by quarto is graphviz that allows complex network type visualisations. Examples have been relationships between tables, directed acyclic graphs and basic networks.\ndigraph D {\n\n  A [shape=diamond]\n  B [shape=box]\n  C [shape=circle]\n\n  A -&gt; B [style=dashed, color=grey]\n  A -&gt; C [color=\"black:invis:black\"]\n  A -&gt; D [penwidth=5, arrowhead=none]\n\n}\n\n\n\n\n\n\n\nD\n\n  \n\nA\n\n A   \n\nB\n\n B   \n\nA-&gt;B\n\n    \n\nC\n\n C   \n\nA-&gt;C\n\n      \n\nD\n\n D   \n\nA-&gt;D\n\n  \n\n\n\n\n\nThis is a great solution if you want to show a simple flowchart and there are further more advanced examples here [https://renenyffenegger.ch/notes/tools/Graphviz/examples/index]"
  },
  {
    "objectID": "tutorials/quarto.html#rpivot-table",
    "href": "tutorials/quarto.html#rpivot-table",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Rpivot table",
    "text": "Rpivot table\nSaving perhaps my favorite until last, is the super awesome Rpivottable.\nThis has full click and drag functionality as well the option to set up defaults in the report and also you can click through, create charts and heat maps, filter your data, calculate a pivot table with a median and just do all sorts of magic.\nYou can click and drag the variables around. You can click on the arrows to the side of the variables to filter them. You can click on the count to select a different metric and finally you can click on the table to change the results to a graph or heat map or loads of things.\nIt doesn’t like super huge data sets if you are running it locally but if you get clever with shiny, you can do big things.\nIt also has a habit of overlapping with stuff below it. I am working on a HTNL solution to this and I think this is a ‘feature’ that is being worked on by the developers. I usually just add it at the end of a report or on a separate tab to get around this issue.\nThis whole functionality is done with a couple lines of code. (!!!)\nknitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE\n\n\nif(!require(rpivotTable)){\n    install.packages(\"rpivotTable\", dependencies =TRUE)\n    library(rpivotTable)}\nif(!require(widgetframe)){\n    install.packages(\"widgetframe\", dependencies =TRUE)\n    library(widgetframe)}\n\ndata_pivot &lt;- data %&gt;% filter (org_code %in% c(\"RK9\", \"RWJ\", \"AD913\"))\n\npiv &lt;-rpivotTable(data_pivot,rows=c(\"org_code\"), cols=c(\"type\"), vals=c(\"admissions\"),width=\"100%\", height=\"1200px\", elementId = 4)\n\nhtmlwidgets::saveWidget(widget = piv,\n                        file = \"piv.html\",\n                        selfcontained = TRUE)\nThis widget also seems to have a conflict, and so we are going to save the output and then call it back into an iframe.\n&lt;iframe src = \"piv.html\", width = '100%', height = '1000'&gt; &lt;/iframe&gt;\nThis is an amazing tool that allows click and drag functionality to create a pivot table. You can also run a number of transformations on the data to calculate totals or averages, including median which some other programs struggle with (calling you out excel!). You can also convert into a heat map or chart.\nMore into on rpivottable at https://cran.r-project.org/web/packages/rpivotTable/vignettes/rpivotTableIntroduction.html\nMore info on the htmlwidgets library https://www.rdocumentation.org/packages/htmlwidgets/versions/1.6.1"
  },
  {
    "objectID": "tutorials/quarto.html#thats-all-folks",
    "href": "tutorials/quarto.html#thats-all-folks",
    "title": "Quarto R/Markdown Tutorial",
    "section": "Thats all folks",
    "text": "Thats all folks\nPlease feel free to hack and steal share best practice from this report.\nMore quarto tips than you can shake a stick at can be found at https://github.com/mcanouil/awesome-quarto\nSome really nice visualisation tips can be found at\nhttps://www.data-to-viz.com/caveats.html\nand some more markdown and widget tips at\nhttps://holtzy.github.io/Pimp-my-rmd/ https://www.htmlwidgets.org/\nThere also methods of linking charts to tables using crosstalk, but that gets pretty complex and so I have not covered it here.\nI think tabsets are amazing and really add a level of interactivity to your reports, even if you are still showing static plots and tables.\nOther that I wish you well on your R journey and please do not hesitate to contact me if you have found any interesting things to share.\nOne day I may show you how make snowflakes fall over your report or how to embed a working game of pacman into your reports, but lets save that for another day…\nMerry markdowning\n\nContact\nSimon Wellesley-Miller\n13 Feb 2023"
  },
  {
    "objectID": "tutorials/spc.html",
    "href": "tutorials/spc.html",
    "title": "Statistical Process Control",
    "section": "",
    "text": "The NHSR Plot the Dots package is built by the NHS-R community to provide tools for drawing statistical process control (SPC) charts. The package supports the NHS England programme ‘Making Data Count’. The programme encourages boards, managers, and analyst teams to present data in ways that show change over time, and drive better understanding of indicators than ‘RAG’ (red, amber, green) rated reports often present.\n\nInstallation\n# install from CRAN\ninstall.packages(\"NHSRplotthedots\")\ninstall.packages(\"rmarkdown\")\n\n# Or install the development version from GitHub using {remotes} package:\n# install.packages(\"remotes\")\nremotes::install_github(\"https://github.com/nhs-r-community/NHSRplotthedots\", build_vignettes = TRUE)\nThe help-files, and vignette within this package tell you more about the possible options for controlling the charts\n\n\nExample Chart\nBelow is an example of the type of chart the package produces. The plot uses the ae_attendances dataset from the {NHSRdatasets} package and a bit of {dplyr} code to select some organisations.\n\nPackages used:\nlibrary(NHSRplotthedots)\nlibrary(NHSRdatasets)\nlibrary(tidyverse)\n\ndf &lt;- ae_attendances %&gt;% \n  filter(org_code == \"RQM\", type == 1, period &lt; as.Date(\"2018-04-01\"))\n\ndf %&gt;%\n  ptd_spc(value_field = breaches, date_field = period, improvement_direction = \"decrease\")"
  },
  {
    "objectID": "tutorials/udal.html",
    "href": "tutorials/udal.html",
    "title": "National Data Platform (UDAL)",
    "section": "",
    "text": "Guide on how to query data in UDAL using R. A video tutorial is available on the NHSE-R FutureNHS site."
  },
  {
    "objectID": "tutorials/udal.html#query-udal-in-r",
    "href": "tutorials/udal.html#query-udal-in-r",
    "title": "National Data Platform (UDAL)",
    "section": "Query UDAL in R",
    "text": "Query UDAL in R\nFirst load in appropriate libraries; DBI is the main one for the connection to UDAL, and tidyverse allows you to to use dbpylr verbs.\nlibrary (DBI)\nlibrary (odbc)\nlibrary (tidyverse)\nlibrary (dbplyr)\nsource ('personal_credentials.R')\n\n\n\n\n\n\nImportant!\n\n\n\nIt is good practice not to publish connection strings! See R-Stuido’s guide on managing credentials.\n\n\nOne option is to put your credentials into a separate file (not under version control) as follows:\n# personal_credentials.R\nserv  &lt;-\"&lt;database-server-address&gt;\"\ndb  &lt;- \"&lt;database-name&gt;\"\nuser  &lt;- \"&lt;udal-account-username&gt;\"\nSee the NHSE-R FutureNHS site for specifics on UDAL credentials.\n\nOpen Connection\nThis is the main connection command:\ncon_udal &lt;- dbConnect(\n  drv = odbc(),\n  driver = \"ODBC Driver 17 for SQL Server\",\n  server = serv,\n  database = db,\n  UID = user,\n  authentication = \"ActiveDirectoryInteractive\"\n)\n\n\n\n\n\n\nNote\n\n\n\nWhen this is run a separate window will open where you will need to enter two part authentication\n\n\nOnce that has been run you will see a connection appear in the connections tab - top right\n\n\nRunning SQL Query\nYou can parse a standard sql query using a dbGetQuery() command, it requires the connection string (that you have already specified above) and the sql code.\n\nEach query can return one dataframe of data, if you have multiple queries use separate queries (there is a way around this but it is quite complex)\nThe dbGetQuery() does not like temporary tables (they are bad practice anyway), but it will accept common table expressions (CTEs) or subqueries\n\ndf_one &lt;- dbGetQuery(\n  conn = con_udal,\n  statement = \"\n\n  SELECT  appointment_date,\n          appointment_status,\n          HCP_Type,\n          Appointment_Mode,\n          Count_Of_Appointments\n\n  FROM  [UKHF_Appts_In_General_Practice].[Appts_GP_Daily1]\n\n  WHERE Appointment_Date &gt;= '2022-11-25'\n\n  \"\n  )\nAlternatively we can keep our sql separate and read in a script:\ndf_two &lt;- dbGetQuery(con_udal, \n                     read_file(\"test_query.sql\"))\nWhere test_query.sql is given as:\n  SELECT  appointment_date,\n          appointment_status,\n          HCP_Type,\n          Appointment_Mode,\n          Count_Of_Appointments\n\n  FROM  [UKHF_Appts_In_General_Practice].[Appts_GP_Daily1]\n\n  WHERE Appointment_Date &gt;= '2022-11-25'\n\n\nUsing dbpylr\nFinally we can skip sql entirely and query using dplyr like verbs. First we make a connection to the table we want - note that this does not actually create a table - more of a virtual one:\ndbpylr_table &lt;- tbl(con_udal, \n                    in_schema(\"UKHF_Appts_In_General_Practice\", \n                              \"Appts_GP_Daily1\"))\nHowever we can then use our virtual table and query it using dplyr verbs.\nEnsure to add collect at the end to convert the final results into an actual dataframe:\ndf_three &lt;- dbpylr_table %&gt;%\n  select (Appointment_Date,\n          Appointment_Status,\n          HCP_Type,\n          Appointment_Mode,\n          Count_Of_Appointments) %&gt;%\n  filter (Appointment_Date &gt;= '2022-11-25') %&gt;%\n  collect()\n\n\n\n\n\n\nImportant!\n\n\n\nWhen you are experimenting with R code, do not use collect(). Only when you have finalised the code for the information being extracted from the database, use collect() to read the complete output into the R session.\n\n\n\n\nClose Connection\nWhen you have finished with the connection it is good practice to close it:\ndbDisconnect(con_udal)\nta da!"
  },
  {
    "objectID": "tutorials/r-language.html",
    "href": "tutorials/r-language.html",
    "title": "R Programming Language",
    "section": "",
    "text": "Note\n\n\n\nR and R-Studio are available on Modern Desktop (see Company Portal &gt; Apps) and on UDAL VMs."
  },
  {
    "objectID": "tutorials/r-language.html#resources",
    "href": "tutorials/r-language.html#resources",
    "title": "R Programming Language",
    "section": "Resources",
    "text": "Resources\n\nLearning R\nReports\nMarkdown\nDashboards (Shiny)\nPackages\n\n\nNHS Themes\n\nNHS-R Theme [code]\n\n\n\nNHS code\n\nNHS-R how-tos\nNHS-R R-Markdown functions"
  },
  {
    "objectID": "tutorials/r-language.html#quarto",
    "href": "tutorials/r-language.html#quarto",
    "title": "R Programming Language",
    "section": "Quarto",
    "text": "Quarto\n\nQuarto Guide"
  },
  {
    "objectID": "updates.html",
    "href": "updates.html",
    "title": "Updates",
    "section": "",
    "text": "Query SQL data in UDAL using R\n\n\n\n\n\n\n\nTutorial\n\n\nR\n\n\nSQL\n\n\nUDAL\n\n\n\n\nNew tutorial on querying SQL data in UDAL using R\n\n\n\n\n\n\nFeb 5, 2023\n\n\nCraig Robert Shenton\n\n\n\n\n\n\n  \n\n\n\n\nGit in R-Studio Tutorial\n\n\n\n\n\n\n\nTutorial\n\n\nGit\n\n\nGitHub\n\n\nR-Studio\n\n\n\n\nNew tutorial on using version control (Git) in R-Studio\n\n\n\n\n\n\nJan 19, 2023\n\n\nChatGPT\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "contribute.html",
    "href": "contribute.html",
    "title": "Contribute to the docs",
    "section": "",
    "text": "Welcome to our guide on adding a new page to this documentation site using Quarto. Quarto uses Markdown allowing you to create and maintain high-quality, reproducible documents with ease.\nIn the following sections, we will cover the steps to create and deploy a new page into our NHS Quarto documentation site."
  },
  {
    "objectID": "contribute.html#clone-the-repository",
    "href": "contribute.html#clone-the-repository",
    "title": "Contribute to the docs",
    "section": "Clone the repository",
    "text": "Clone the repository\nOpen your command prompt or terminal, and navigate to the directory where you want to clone the repository.\nTo clone the repository, use the following command:\ngit clone https://github.com/nhsengland/nhs-r-reporting.git\nThe URL can be found on the repository’s main page on GitHub.\nThe cloning process will create a new folder named after the repository in your chosen directory. Once the cloning is complete, navigate to the newly created folder:\ncd nhs-r-reporting\nNow you have a local copy of the repository on your computer. You can now start working on the project files and make changes."
  },
  {
    "objectID": "contribute.html#make-a-new-branch-of-the-repository",
    "href": "contribute.html#make-a-new-branch-of-the-repository",
    "title": "Contribute to the docs",
    "section": "Make a new branch of the repository",
    "text": "Make a new branch of the repository\nCreating a new branch in the repository allows you to safely work on new features or modifications without affecting the main project.\nBefore creating a new branch, ensure that you have the latest version of the main branch by executing the following commands:\ngit checkout main\ngit pull\nTo create a new branch and switch to it immediately, run the command:\ngit checkout -b &lt;branch-name&gt;\nReplace &lt;branch_name&gt; with the desired name for your new branch."
  },
  {
    "objectID": "contribute.html#make-a-new-.qmd-q-markdown-file-in-the-docs-folder",
    "href": "contribute.html#make-a-new-.qmd-q-markdown-file-in-the-docs-folder",
    "title": "Contribute to the docs",
    "section": "Make a new .qmd (q-markdown) file in the /docs folder",
    "text": "Make a new .qmd (q-markdown) file in the /docs folder\nOpen the .qmd file add a YAML header with a title and subtitle.\n---\ntitle: Contribute to the docs\nsubtitle: \"How to add a new page to the documentations site using Quarto?\"\n---\nBelow this line you can write your guide or contribution in markdown."
  },
  {
    "objectID": "contribute.html#think-about-accessibility",
    "href": "contribute.html#think-about-accessibility",
    "title": "Contribute to the docs",
    "section": "Think about accessibility",
    "text": "Think about accessibility\nIf you are writing a guide, please add alt text or captions to any images for accessibility. It helps people with visual impairments understand the content of the images. Here’s how you can add alt text and captions to images in a Quarto document:\n\n1. Adding Alt Text\nAlt text is a short description of an image that assists people with visual impairments. It is displayed if the image cannot be loaded or when a screen reader is used. To add alt text to an image in Quarto, use the alt attribute in the image syntax:\n![](path/to/image.png){alt=\"A brief description of the image\"}\nReplace path/to/image.png with the path to your image file and provide a brief description of the image within the quotes following alt=.\n\n\n2. Adding Captions\nCaptions are textual descriptions displayed below the image, providing additional context. To add a caption to an image in Quarto, use the fig.cap attribute in the image syntax:\n![](path/to/image.png){fig.cap=\"Caption text for the image\"}\nReplace path/to/image.png with the path to your image file and provide the caption text within the quotes following fig.cap=.\n\n\n3. Combining Alt Text and Captions\nYou can add both alt text and captions to an image in Quarto by including both the alt and fig.cap attributes in the image syntax:\n![](path/to/image.png){alt=\"A brief description of the image\" fig.cap=\"Caption text for the image\"}\nReplace path/to/image.png with the path to your image file, provide a brief description of the image within the quotes following alt=, and provide the caption text within the quotes following fig.cap=.\nBy including alt text and captions in your Quarto documents, you’ll make your content more accessible to a wider range of users."
  },
  {
    "objectID": "contribute.html#add-a-link-to-your-file-to-the-_quarto.yml-config-file-in-docs",
    "href": "contribute.html#add-a-link-to-your-file-to-the-_quarto.yml-config-file-in-docs",
    "title": "Contribute to the docs",
    "section": "Add a link to your file to the _quarto.yml config file in /docs",
    "text": "Add a link to your file to the _quarto.yml config file in /docs\nOpen the _quarto.yml configuration file and find the sidebar config code.\nsidebar:\n  - id: nav\n    style: \"floating\"\n    collapse-level: 3\n    align: left\n    contents:\nUnder the contents: object add a new section (if required), a string lable for your page, and a link to the .qmd file itself.\n- section: \"RAP\"\n  contents:\n    - text: \"Reproducible Analytical Pipelines\"\n      file: intro-to-rap.qmd"
  },
  {
    "objectID": "contribute.html#publish-your-changes-to-github",
    "href": "contribute.html#publish-your-changes-to-github",
    "title": "Contribute to the docs",
    "section": "Publish your changes to GitHub",
    "text": "Publish your changes to GitHub\n\n\n\n\n\n\nRender Quarto before publishing\n\n\n\n\n\nRemember to render your changes locally using R-Studio before publishing\n\n\n\nAdd all changes and commit locally\ngit commit -a -m 'Added new page to docs'\nThen push your changes to the remote branch\ngit push origin &lt;branch-name&gt;\nFinally, open a Pull Request (PR) https://github.com/nhsengland/nhs-r-reporting/pulls"
  },
  {
    "objectID": "tutorials/rap.html",
    "href": "tutorials/rap.html",
    "title": "Reproducible Analytical Pipelines (RAP)",
    "section": "",
    "text": "Reproducible Analytical Pipelines (RAP) brings together a number of best practices to ensure published NHS statistics meet the highest standards of transparency and reproducibility."
  },
  {
    "objectID": "tutorials/rap.html#resources",
    "href": "tutorials/rap.html#resources",
    "title": "Reproducible Analytical Pipelines (RAP)",
    "section": "Resources",
    "text": "Resources\n\nNHS Digital RAP Community of Practice\nNew Website!\n\nWhat is RAP\nLevels of RAP\n\n\n\nNHS England\n\nNHS Open-source policy (Draft)\nOpen code checklist\nSharing Code in the Open by NHSX\n\n\n\nGOV.datascience RAP Companion\nhttps://ukgovdatascience.github.io/rap_companion/\n\n\nFurther reading\n\nBe open and use open source\nThe benefits of coding in the open\nOpen source repositories by the Government Digital Service\nBennett Institute Open Manifesto: Better Data for the NHS\n\n\n\nNHS BSA RAP\nRAP Presentation\n\n\nExamples\n\nPrescription Cost Analysis (PCA)\nMedicines Used in Mental Health\nPrescribing for Diabetes"
  },
  {
    "objectID": "tutorials/github.html",
    "href": "tutorials/github.html",
    "title": "NHSE GitHub",
    "section": "",
    "text": "Official NHS England GitHub Organisation: github.com/nhsengland\nTo request membership email: github@england.nhs.uk\nYou can also request to join a team or set one up for your department.\nYou can use your personal GitHub account if you also do open-source work."
  },
  {
    "objectID": "tutorials/github.html#github-desktop",
    "href": "tutorials/github.html#github-desktop",
    "title": "NHSE GitHub",
    "section": "GitHub Desktop",
    "text": "GitHub Desktop\nNote that the GitHub desktop app is available on Modern Desktop (see Company Portal &gt; Apps) and can be installed on UDAL VMs. The tool greatly improves the Git experience and makes managing multiple software projects much easier."
  },
  {
    "objectID": "tutorials/github.html#resources",
    "href": "tutorials/github.html#resources",
    "title": "NHSE GitHub",
    "section": "Resources",
    "text": "Resources\n\nGitHub Features (GitHub)\nIntro to Git (NHS Digital RAP)\nWays of Working (NHS England - Draft)\nVersion Control (GOV.Data Sci)\nPublishing Code (NHS Digital RAP)\nSocial Coding (NHS Digital RAP)"
  },
  {
    "objectID": "tutorials/github.html#github-pages",
    "href": "tutorials/github.html#github-pages",
    "title": "NHSE GitHub",
    "section": "GitHub Pages",
    "text": "GitHub Pages\nPublish a Quarto website project to your GitHub pages using GitHub actions.\n\nAdd the GitHub Actions workflow to your project\nCopy quarto-publish.yml to the folder .github/workflows/quarto-publish.yml.\non:\n  push:\n    branches: main\n  pull_request:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        \n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Publish to GitHub Pages (and render)\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n\n\n\n\n\nNote\n\n\n\nIf your Quarto project is not in the top level folder of your repository (in this case in /docs), then add the following path to the ‘Publish to GitHub Pages (and render)’ action:\n- name: Publish to GitHub Pages (and render)\n  uses: quarto-dev/quarto-actions/publish@v2\n  with:\n    target: gh-pages\n    path: docs\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n\n\n\n\n\n\n\nWarning\n\n\n\nDo not edit the GITHUB_TOKEN to add a personal secret to this file. This file has the same permissions as your repository, and might be publicly readable.\n\n\n\n\nConfigure the repository before publishing\nQuarto needs to configure the repository for publishing through GitHub Actions. To do this, run quarto publish gh-pages locally once.\n\n\nCommit and push the workflow\nNow, add and commit the workflow file you have just created, and push the result to GitHub. This should trigger a new action from GitHub that will automatically render and publish your website through GitHub pages.\n\n\n\n\n\n\nNote\n\n\n\nNote that GitHub Pages uses a gh-pages branch in your repository, which will be automatically created if one doesn’t exist."
  },
  {
    "objectID": "tutorials/rstudio-git.html",
    "href": "tutorials/rstudio-git.html",
    "title": "Git in R-Studio",
    "section": "",
    "text": "This guide will show you how to create new R-Studio projects with version control features using Git and GitHub, and how to link R-Studio with a GitHub repository.\nThis will allow you to work entirely from R-Studio, applying version control to your scripts, creating new project on GitHub and doing all standard version control actions: commits, pushes and merges, directly from R-Studio."
  },
  {
    "objectID": "tutorials/rstudio-git.html#create-a-new-github-repo",
    "href": "tutorials/rstudio-git.html#create-a-new-github-repo",
    "title": "Git in R-Studio",
    "section": "Create a New GitHub Repo",
    "text": "Create a New GitHub Repo\nFor this guide, we are going to create a new GitHub repository. Clicking the New green button on GitHub (top left) presents you with the following options:\n\n\n\nCreating a new GitHub repository with the ‘New’ button\n\n\n\nDo not use a template unless required\nGive your repository a name, typically lower-case with a dash - separating each word.\nSet the visibility to Public (see note below)\nSelect, add a README file\nAdd a .gitignore template for R\nGive it the MIT License\nClick the Create Repository button\n\n\n\n\n\n\n\nNote\n\n\n\nWhile we encourage the sharing of code in PUBLIC repositories, please take note of NHS England’s policies on open-source work relating the official NHSE projects:\n\nNHS Open-source policy (Draft)\nOpen code checklist\nSharing Code in the Open by NHSX\n\n\n\nFollowing the steps above, I created a new public repo: https://github.com/Pablo-source/climate_viz"
  },
  {
    "objectID": "tutorials/rstudio-git.html#clone-repository-into-r-studio",
    "href": "tutorials/rstudio-git.html#clone-repository-into-r-studio",
    "title": "Git in R-Studio",
    "section": "Clone Repository into R-Studio",
    "text": "Clone Repository into R-Studio\nIn this section we are going to clone our GitHub project into a new project we will create in R-Studio.\n\nFrom GitHub, select the &lt;&gt; Code button on the repo page to display the different cloning options for this project.\nChoose HTTPS and click on the copy icon (overlapped squares) on the right side of the URL.\n\n\nThis is the URL I just copied from the example repo:\n\nhttps://github.com/Pablo-source/climate_viz.git\n\nNow in R-Studio, we start by creating a new project:\n\nChoose the third option &gt; Version Control.\nThen select the &gt; Git option.\nPaste the HTTPS address in the Repository URL.\nRemember to tick (Open in new session) option and press Create Project.\n\n\nThis will have created a new folder on you local machine. If you navigate to it, you will see it contains all components of a GitHub Project."
  },
  {
    "objectID": "tutorials/rstudio-git.html#the-r-studio-git-menu",
    "href": "tutorials/rstudio-git.html#the-r-studio-git-menu",
    "title": "Git in R-Studio",
    "section": "The R-Studio Git Menu",
    "text": "The R-Studio Git Menu\nA new Git options menu is now available in R-Studio thanks to version control mode. This is how R-Studio can keep track of our project and files. It is important to remember that Git and GitHub keep track of changes on files , not folders.\nOnce we start adding content to your project in R-Studio the changes will show up here.\n\n\nTo select files to be saved to a Git commit, click the Staged option on Git tab\nTo make a commit locally from R Studio we press the Commit button. Make sure to name your commits in a descriptive way.\nTo sync your local commits to GitHub (online), we then press Push.\n\nIt will now ask us for our GitHub username and password.\n\n\n\n\n\n\nIMPORTANT\n\n\n\nYou will get this error message: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n\n\nTherefore, we can’t use our GitHub password, but instead a personal access token. This is a security feature for using HTTPS to connect your repo to R-Studio."
  },
  {
    "objectID": "tutorials/rstudio-git.html#generate-an-github-access-token",
    "href": "tutorials/rstudio-git.html#generate-an-github-access-token",
    "title": "Git in R-Studio",
    "section": "Generate an GitHub Access Token",
    "text": "Generate an GitHub Access Token\nThis is required to authenticate users from R-Studio with their specific GitHub repo, so code we push from R studio can be securely identified with the developer’s project repository:\n\nLog into GitHub, navigate to your profile icon, top righ and click on &gt; Settings.\nAt the bottom of the next menu, click on &gt; Developer settings.\nSelect &gt; Personal access tokens and then the &gt; Tokens (classic).\nFinally, click &gt; Generate new token (classic) from the top right button.\n\n\n\n\nNavigating to the ‘Generate new token’ button in GitHub\n\n\n\nGive your token a name (“R-studio git” for example).\nSet expiration date for 90 days.\nSet the scope to cover repo and its sub-sections.\nUnless specifically required, do not grant access to other sections.\n\n\n\n\nSetting the access token scope for the new personal access token\n\n\n\nClick on &gt; Generate token button at the bottom of the page.\n\n\n\n\n\n\n\nTIP\n\n\n\nMake sure to copy your personal access token now. You won’t be able to see it again!\n\n\n\n\n\n\n\n\nIMPORTANT\n\n\n\nNever share your token with anybody. That will allow other users to control any action in scope on your GitHub account.\n\n\nYou can now, paste the token into R-Studio in lieu of a password."
  },
  {
    "objectID": "tutorials/rstudio-git.html#published-to-github",
    "href": "tutorials/rstudio-git.html#published-to-github",
    "title": "Git in R-Studio",
    "section": "Published to GitHub",
    "text": "Published to GitHub\nAfter all these steps, we have finally uploaded our modified file from R-Studio to GitHub. You can check that the file is available now on GitHub by looking at your commit history:\n\n\n\nVerifying the uploaded file in GitHub commit history"
  },
  {
    "objectID": "tutorials/rstudio-git.html#resources",
    "href": "tutorials/rstudio-git.html#resources",
    "title": "Git in R-Studio",
    "section": "Resources",
    "text": "Resources\n\nNHS-D RAP Community - R-Studio/Git tutorial\nTutorial for Creating a new RStudio project with GitHub to visualize climate change. Riffamonas Project YouTube channel. https://www.youtube.com/watch?v=d5dUkO5lXds\nSupport for password authentication was removed. Please use a personal access token - RStudio Cloud. 1Littlecoder YouTube channel.\n\nBy: Pablo Leon-Rodenas &lt;pablo.leonrodenas@nhs.net&gt;"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "Maps in R using ggplot2 and OSM packages\n\n\n\nPablo Leon |pablo.leonrodenas@nhs.net\n\n\nInvalid Date\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto R/Markdown Tutorial\n\n\n\nQuarto\n\n\nR\n\n\nMarkdown\n\n\n\n\nSimon Wellesley-Miller\n\n\nFeb 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNational Data Platform (UDAL)\n\n\n\nSQL\n\n\nR\n\n\nNHS England\n\n\n\n\nSimon Wellesley-Miller\n\n\nFeb 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReproducible Analytical Pipelines (RAP)\n\n\n\nRAP\n\n\nNHS England\n\n\n\n\nCraig Robert Shenton\n\n\nJan 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNHSE GitHub\n\n\n\nGit\n\n\nGitHub\n\n\nNHS England\n\n\n\n\nCraig Robert Shenton\n\n\nJan 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit in R-Studio\n\n\n\nGit\n\n\nGitHub\n\n\nR-Studio\n\n\n\n\nPablo Leon-Rodenas\n\n\nJan 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Process Control\n\n\n\nNHS-R\n\n\nSPC\n\n\n\n\nCraig Robert Shenton\n\n\nJan 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Programming Language\n\n\n\nR\n\n\nNHS-R\n\n\n\n\nCraig Robert Shenton\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNHS Colour Guidlines\n\n\n\nNHS England\n\n\n\n\nCraig Robert Shenton\n\n\nNov 21, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tutorials/R_drop_in_session_26_may_Maps_in_R/maps in R 26 May 2023.html#intro",
    "href": "tutorials/R_drop_in_session_26_may_Maps_in_R/maps in R 26 May 2023.html#intro",
    "title": "Maps in R using ggplot2 and OSM packages",
    "section": "Intro",
    "text": "Intro\nThese slides were presented in the NHSE-R drop in session on Friday 26th May 2023.\nIn R we can plot geospatial data using several methods, today I will focus on static maps using ggplot2 and osm packages. Drawing maps usually imply these steps:\n\nGetting shapefiles to draw a map\nObtaining metadata to plot on the map\nIn R we load the multypoligon objects using geom_sf() and coord_sf()\nThen we can take advantage of ggplot2 framework to overlay one map on top of another\n\nAn introduction to plotting maps in R using ggplot2 can be found on this online book: https://ggplot2-book.org/maps.html."
  },
  {
    "objectID": "tutorials/R_drop_in_session_26_may_Maps_in_R/maps in R 26 May 2023.html#nhs-health-boundaries",
    "href": "tutorials/R_drop_in_session_26_may_Maps_in_R/maps in R 26 May 2023.html#nhs-health-boundaries",
    "title": "Maps in R using ggplot2 and OSM packages",
    "section": "1. NHS Health boundaries",
    "text": "1. NHS Health boundaries\nThe Office for National Statistics provides a free and open access to several geographic products. There is a specific section for Health boundaries on their Open Geography Portal website: https://geoportal.statistics.gov.uk/.\nFrom Clinical Commissioning Groups section download 2021 Boundaries shapefile zipped file.\n\n\n\n\n\nHealth Boundaries\n\n\n\n\n\n\nHealth Boundaries details\n\n\n\n\n\n\n\nhttps://github.com/Pablo-source"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NHS England R Community",
    "section": "",
    "text": "Welcome to the NHS England R community documentation site\nThis site is open to all to share good practice, basic knowledge around access and using R across NHS England platforms, and creating a place for us to share our collective knowledge, code, resources and content.\nThe NHS England R Community is not intended to replace any other R user groups - there’s a fantastic national NHS-R Community and lots of local sharing of R work, we want to use this site to signpost to other resources for those specifically using R within NHS England.\nIt is a community - and we need your help"
  },
  {
    "objectID": "index.html#what-is-r-and-why-is-it-used-at-nhse",
    "href": "index.html#what-is-r-and-why-is-it-used-at-nhse",
    "title": "NHS England R Community",
    "section": "What is R and why is it used at NHSE?",
    "text": "What is R and why is it used at NHSE?\nR is an open-source programming language that is widely used among statisticians and data scientists in the NHS. R has a large number of built-in functions and packages for statistical analysis and data visualisation. Along with tools such as Python1, R can be used to develop so-called reproducible analytical pipelines (RAP).\nReproducible analytical pipelines are the gold standard for creating analytical outputs in government2. It is a set of standards that promote best practice across the sector3. By following RAP we can be much more transparent with how we work, increasing trust and confidence in our publications, and make it easier for others to verify and replicate our analysis."
  },
  {
    "objectID": "index.html#example-analytical-reports",
    "href": "index.html#example-analytical-reports",
    "title": "NHS England R Community",
    "section": "Example analytical reports",
    "text": "Example analytical reports\nBelow is an example of an analytical report that is fully open-source and RAP compliant developed using R, Quarto, and plotly, and open data from the NHS-R Community. The NHS theme used in this report is available on the NHS-R Community GitHub repository.\n\n\nIn development:\n\nThese interactive html reports can be confiugured with parameters to create multiple versions of the same report, charts, and analyses but for different organisations\n\nRegions\nICB / SICBL\nPCN / GP\nTrust / Ward etc\n\nUsing {targets} we can define dependencies in the data processing stages and process these reports automatically when new data is available.\nA standard set of reporting charts and tables can be pre-configured using plotly, adjusting the colors, fonts, annotations, and labels to match the NHS style.\nA shared library of unit-tested functions allows complex analysis to be run with every calculation fully validated and documented.\nQuality assurance can also be built into these functions so that logging, data validation, and schema checks can be run to ensure that our data pipelines are functioning correctly, and all the data follows the correct structure and format."
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "NHS England R Community",
    "section": "Contributing",
    "text": "Contributing\nContributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.\nSee CONTRIBUTING.md for detailed guidance."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "NHS England R Community",
    "section": "License",
    "text": "License\nDistributed under the MIT License. See LICENSE.md for more information.\n\n\n\n\n\n\nPlease Note:\n\n\n\nNo private or patient data are shared in this repository."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "NHS England R Community",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the NHS Python Community↩︎\nSee Professor Ben Goldacre’s Better, Broader, Safer review into how the efficient and safe use of health data for research and analysis can benefit patients and the healthcare sector.↩︎\nSee NHS Digital’s RAP Community of Practice guide on the levels of RAP.↩︎"
  },
  {
    "objectID": "posts/r-udal.html",
    "href": "posts/r-udal.html",
    "title": "Query SQL data in UDAL using R",
    "section": "",
    "text": "Hi all, a new guide on how to query data in UDAL using R has been posted in the tutorials section.\nWritten by Simon Wellesley-Miller from NHSE.\nThere is also an accompanying video tutorial on our the NHSE-R FutureNHS site."
  }
]